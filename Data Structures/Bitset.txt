-Initialization:

bitset<size> bset1;   all bits 0
  
bitset<size> bset2(integer);   bitset<10> bset2(4); (0000000100)
  
bitset<size> bset3(string("1100")); 

-Functions:
set[index] = 1;   Bitset starts its indexing backward (10110, 0 is at 0th and 3rd indices whereas 1 is at 1st 2nd and 4th indices.
cout << set << endl; 
set.count();   number of 1
set.size();
set.any();   returns true if 1 bit is '1'
set.none();   returns true, if none of the bit is '1'
set.set();   makes all bits '1'
set.reset();    makes all bits '0'

cout << bitset<size> set(num);    converts from decimal to binary
string str=set.to_string();    converts to string

-Operators:

bitset<4> bset1(9); // bset1 contains 1001 
bitset<4> bset2(3); // bset2 contains 0011 
  
    // comparison operator 
    cout << (bset1 == bset2) << endl; //0 
    cout << (bset1 != bset2) << endl; //1 
  
    // bitwise operation and assignment 
    cout << (bset1 ^= bset2) << endl; // 1010 
    cout << (bset1 &= bset2) << endl; // 0010 
    cout << (bset1 |= bset2) << endl; // 0011 
  
    // left and right shifting 
    cout << (bset1 <<= 2) << endl; // 1100 
    cout << (bset1 >>= 1) << endl; // 0110 
  
    // not operator 
    cout << (~bset2) << endl; // 1100 
  
    // bitwise operator 
    cout << (bset1 & bset2) << endl; // 0010 
    cout << (bset1 | bset2) << endl; // 0111 
    cout << (bset1 ^ bset2) << endl; // 0101 